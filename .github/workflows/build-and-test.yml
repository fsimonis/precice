name: Build and Test
on:
  pull_request:
    paths:
      - 'cmake/**'
      - 'examples/**'
      - 'src/**'
      - 'thirdparty/**'
      - 'CMakeLists.txt'

jobs:
  build:
    name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        IMAGE: 'precice/ci-ubuntu18.04:latest'
        CONFIG: [Bare, MPI, MPIPETSc]
        CXX: 'g++'
        TYPE: [Debug, Release]
        include:
          - IMAGE: 'precice/ci-ubuntu20.04:latest'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'precice/ci-archlinux:latest'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'precice/ci-archlinux:latest'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'precice/ci-archlinux:latest'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Debug
          - IMAGE: 'precice/ci-archlinux:latest'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Release
    container: ${{ matrix.IMAGE }}
    env:
      CCACHE_DIR: "$GITHUB_WORKSPACE/ccache"
    steps:
      - name: Restore ccache
        uses: actions/cache@v1
        with:
          path: ccache
          key: precice-ccache-${{ runner.IMAGE }}-${{ matrix.CONFIG }}-${{ matrix.CXX }}-${{ matrix.TYPE }}
      - uses: actions/checkout@v2
      - name: Generate build directory
        run: mkdir -p build
      - name: Configure
        working-directory: build
        env:
          CXX: ${{ matrix.CXX }}
          CXXFLAGS: "-Wall -Wextra"
          MPI: ${{ contains(matrix.CONFIG, "MPI") }}
          PETSc: ${{ contains(matrix.CONFIG, "PETSc") }}
        run: cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug -DPRECICE_MPICommunication=${{ env.MPI }} -DPRECICE_PETScMapping=${{ env.PETSc }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
      - uses: actions/upload-artifact@2
        with:
          name: CMakeCache
          path: build/CMakeCache.txt
      - uses: actions/upload-artifact@2
        with:
          name: CMakeLogs
          path: 'build/CMakeFiles/*.log'
      - uses: actions/upload-artifact@2
        with:
          name: CompileCommands
          path: build/compile_commands.json
      - name: Compile
        working-directory: build
        run: make -j $(nproc)
      - name: CCache Statistics
        run: ccache -s
      - name: Adjust user rights
        run: chown -R $PRECICE_USER build
      - name: Tests - mandatory
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: build
        run: su -c "ctest -LE canfail" $PRECICE_USER
      - name: Tests - canfail
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: build
        continue-on-error: true
        run: su -c "ctest -L canfail" $PRECICE_USER
      - name: Check packages
        working-directory: build
        if: ${{ contains(matrix.IMAGE, "ubuntu") }}
        run: |
          cpack
          lintian *.deb
      - uses: actions/upload-artifact@2
        if: failure()
        with:
          name: TestOutput
          path: build/TestOutput/
